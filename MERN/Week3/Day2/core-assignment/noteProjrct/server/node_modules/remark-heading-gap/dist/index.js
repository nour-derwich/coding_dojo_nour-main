"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let warningIssued;
const defaults = {
  2: {
    before: 2
  }
};

function _default(options) {
  const data = this.data();

  const gaps = _objectSpread(_objectSpread({}, defaults), options);

  const headingGap = {
    join: [betweenHeading]
  };
  /* istanbul ignore next - old remark. */

  if (!warningIssued && this.Compiler && this.Compiler.prototype && this.Compiler.prototype.visitors) {
    warningIssued = true;
    console.warn('[remark-heading-gap] Warning: please upgrade to remark 13 to use this plugin');
  }
  /* istanbul ignore next - other extensions */


  if (!data.toMarkdownExtensions) data.toMarkdownExtensions = [];
  data.toMarkdownExtensions.push(headingGap);

  function betweenHeading(left, right) {
    if (left.type === 'heading') {
      return Math.max(size(left, 'after'), left.type === right.type ? size(right, 'before') : 0);
    }

    if (right.type === 'heading') {
      return size(right, 'before');
    }
  }

  function size({
    depth
  }, field) {
    return depth in gaps && field in gaps[depth] ? gaps[depth][field] : 1;
  }
}

module.exports = exports.default;